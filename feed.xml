<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://juliaannjose.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://juliaannjose.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-22T00:55:27+00:00</updated><id>https://juliaannjose.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Multi-Layer Perceptron</title><link href="https://juliaannjose.github.io/blog/2020/mlp/" rel="alternate" type="text/html" title="Multi-Layer Perceptron"/><published>2020-12-20T19:53:00+00:00</published><updated>2020-12-20T19:53:00+00:00</updated><id>https://juliaannjose.github.io/blog/2020/mlp</id><content type="html" xml:base="https://juliaannjose.github.io/blog/2020/mlp/"><![CDATA[<p>This guide will help you build a 3 layer Neural Network from scratch i.e without the use of any existing python libraries.</p> <p>A Neural Network generally takes the form:</p> <ol> <li> <p>Input Layer</p> </li> <li> <p>Hidden Layer(s)</p> </li> <li> <p>Output Layer</p> </li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/mlp-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/mlp-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/mlp-1400.webp"/> <img src="/assets/img/mlp.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>For this tutorial we will implement a 3 layer NN with 2-\(n_h\)-1 architecture where \(n_h\) stands for the number of hidden nodes.</p> <p>Some specifications:</p> <ul> <li> <p>Activation function used: Sigmoid</p> </li> <li> <p>Learning Rate: 0.005</p> </li> <li> <p>Number of hidden nodes, \(n_h\) = 2,4,6,8,10</p> </li> <li> <p>Error: Mean Squared Error</p> </li> </ul> <p><strong>Step 1:</strong> Load the given train and test datasets.</p> <p><strong>Step 2:</strong> Feature normalize your train and test datasets:</p> <p>For each feature \(x_i\) , your normalized feature \(y_i\) will be:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">yi</span> <span class="o">=</span> <span class="p">(</span><span class="n">xi</span> <span class="o">-</span> <span class="n">mi</span><span class="p">)</span><span class="o">/</span><span class="n">si</span>      
</code></pre></div></div> <p>where \(m_i\) is the mean and \(s_i\) is the standard deviation of the given feature.</p> <p>Use the same \(m_i\) and \(s_i\) values to normalize your test dataset. Remember, you only transform your test dataset with these values and not fit it using its own mi and si values.</p> <p><strong>Step 3:</strong> Split the train dataset into train and validation sets (an 80/20 split should work)</p> <p><strong>Step 4:</strong> The Multi Layer Perceptron Class and functions:</p> <p>Our sigmoid activation function and itâ€™s derivatives are defined as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">t</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">sigmoid_derivative</span><span class="p">(</span><span class="n">g</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">g</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">g</span><span class="p">)</span>
</code></pre></div></div> <p>Our Multi-Layer Perceptron Class is defined as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MultiLayerPerceptron</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span><span class="n">nh</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">input</span>      <span class="o">=</span> <span class="n">x</span>
        <span class="c1">#random weight initialization
</span>        <span class="n">self</span><span class="p">.</span><span class="n">weights1</span>   <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">nh</span><span class="p">)</span> 
        <span class="c1">#random weight initialization
</span>        <span class="n">self</span><span class="p">.</span><span class="n">weights2</span>   <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="n">nh</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">y</span>          <span class="o">=</span> <span class="n">y</span>
        <span class="n">self</span><span class="p">.</span><span class="n">output</span>     <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">feedforward</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">layer1</span> <span class="o">=</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">weights1</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">output</span> <span class="o">=</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">layer1</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">weights2</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">output</span>

    <span class="k">def</span> <span class="nf">backpropagation</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">
        This function calculates new weight vectors and updates 
        the weight for both input 
        to hidden as well as hidden to output layers. 
        </span><span class="sh">'''</span>
        <span class="n">del_w2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">layer1</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">output</span><span class="p">)</span>         
        <span class="o">*</span> <span class="nf">sigmoid_derivative</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">output</span><span class="p">)))</span>
        <span class="n">del_w1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">.</span><span class="n">T</span><span class="p">,</span>  <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> 
        <span class="n">self</span><span class="p">.</span><span class="n">output</span><span class="p">)</span> <span class="o">*</span> <span class="nf">sigmoid_derivative</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">output</span><span class="p">),</span>                 
        <span class="n">self</span><span class="p">.</span><span class="n">weights2</span><span class="p">.</span><span class="n">T</span><span class="p">)</span> <span class="o">*</span> <span class="nf">sigmoid_derivative</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">layer1</span><span class="p">)))</span>
        
        <span class="c1"># weight update rule (negative sign changes to positive. 
</span>        <span class="c1"># because of a negative sign in derivative calculation)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">weights1</span> <span class="o">+=</span> <span class="mf">0.0005</span><span class="o">*</span><span class="n">del_w1</span>
        <span class="n">self</span><span class="p">.</span><span class="n">weights2</span> <span class="o">+=</span> <span class="mf">0.0005</span><span class="o">*</span><span class="n">del_w2</span>
    
    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">feedforward</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">backpropagation</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">validation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">x</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">
        This function is used to test the validation test samples 
        using the above updated weights.
        </span><span class="sh">'''</span>
        <span class="n">self</span><span class="p">.</span><span class="n">l1</span> <span class="o">=</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">weights1</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">out</span> <span class="o">=</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">l1</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">weights2</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">out</span>
</code></pre></div></div> <p><strong>Step 5:</strong> Stopping Criterion:</p> <p>The model stops training when the validation loss no longer changes. The below code snippet implements the same.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">iteration</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">--------------Iteration #{}-------------- 
            </span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">iteration</span><span class="p">))</span>
            
            <span class="c1"># training loss
</span>            <span class="n">training_loss</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">trainY</span> <span class="o">-</span> 
            <span class="n">MLP</span><span class="p">.</span><span class="nf">feedforward</span><span class="p">())))</span>
            <span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="s">Loss: </span><span class="sh">"</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">trainY</span> <span class="o">-</span> 
            <span class="n">MLP</span><span class="p">.</span><span class="nf">feedforward</span><span class="p">())))</span> <span class="c1"># mean squared error
</span>            
            <span class="c1"># val loss before training the model
</span>            <span class="n">prev_val_loss</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">valY</span> <span class="o">-</span> 
            <span class="n">MLP</span><span class="p">.</span><span class="nf">validation</span><span class="p">(</span><span class="n">valX</span><span class="p">)))</span>

            <span class="n">MLP</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">trainX</span><span class="p">,</span><span class="n">trainY</span><span class="p">)</span>

            <span class="c1"># val loss after training the model
</span>            <span class="n">new_val_loss</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">valY</span> <span class="o">-</span> 
            <span class="n">MLP</span><span class="p">.</span><span class="nf">validation</span><span class="p">(</span><span class="n">valX</span><span class="p">)))</span>

            <span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">Validation loss: </span><span class="sh">'</span><span class="p">,</span><span class="n">new_val_loss</span><span class="p">)</span>
            <span class="n">validation_loss</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">new_val_loss</span><span class="p">)</span>

            <span class="c1"># test loss using the updated weights
</span>            <span class="n">test_loss_</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">testY</span> <span class="o">-</span> 
            <span class="n">MLP</span><span class="p">.</span><span class="nf">validation</span><span class="p">(</span><span class="n">testX</span><span class="p">))))</span>
            
            <span class="c1"># if the validation loss doesn't decrease/change 
</span>            <span class="n">further</span><span class="p">,</span> <span class="n">then</span> <span class="n">stop</span><span class="p">.</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">prev_val_loss</span><span class="o">-</span><span class="n">new_val_loss</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">0.000001</span><span class="p">:</span>
                <span class="k">break</span>
</code></pre></div></div> <p><strong>Step 6:</strong> Final test loss using the new weights:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_loss</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">testY</span><span class="o">-</span><span class="n">MLP</span><span class="p">.</span><span class="nf">get_test_output</span><span class="p">(</span><span class="n">testX</span><span class="p">)))</span>
</code></pre></div></div> <p><strong>Step 7:</strong> Train and Test Accuracies:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test accuracy
</span><span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">row</span><span class="p">,</span><span class="n">label</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">testX</span><span class="p">,</span><span class="n">testY</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">MLP</span><span class="p">.</span><span class="nf">get_test_output</span><span class="p">(</span><span class="n">row</span><span class="p">)</span><span class="o">&gt;</span><span class="mf">0.5</span> <span class="ow">and</span> <span class="n">label</span><span class="o">==</span><span class="mf">1.0</span><span class="p">:</span>
         <span class="n">correct</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">elif</span> <span class="n">MLP</span><span class="p">.</span><span class="nf">get_test_output</span><span class="p">(</span><span class="n">row</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">0.5</span> <span class="ow">and</span> <span class="n">label</span><span class="o">==</span><span class="mf">0.0</span><span class="p">:</span>
         <span class="n">correct</span><span class="o">+=</span><span class="mi">1</span>

<span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">Test Accuracy: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">correct</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">testX</span><span class="p">)))</span>
 
<span class="c1">#Training Accuracy Calculation
</span><span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">row</span><span class="p">,</span><span class="n">label</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">trainX</span><span class="p">,</span><span class="n">trainY</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">MLP</span><span class="p">.</span><span class="nf">get_test_output</span><span class="p">(</span><span class="n">row</span><span class="p">)</span><span class="o">&gt;</span><span class="mf">0.5</span> <span class="ow">and</span> <span class="n">label</span><span class="o">==</span><span class="mf">1.0</span><span class="p">:</span>
         <span class="n">correct</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">elif</span> <span class="n">MLP</span><span class="p">.</span><span class="nf">get_test_output</span><span class="p">(</span><span class="n">row</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">0.5</span> <span class="ow">and</span> <span class="n">label</span><span class="o">==</span><span class="mf">0.0</span><span class="p">:</span>
         <span class="n">correct</span><span class="o">+=</span><span class="mi">1</span>

<span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">Training Accuracy {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">correct</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">trainX</span><span class="p">)))</span>
</code></pre></div></div> <p><strong>Step 8:</strong> Train and Test Plots</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">training_loss</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">validation_loss</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">validation</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">test_loss_</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p>The below learning curves correspond to different number of hidden nodes (2,4,6,8 and 10).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/nh-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/nh-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/nh-1400.webp"/> <img src="/assets/img/nh.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="deep_learning"/><category term="neural_networks"/><summary type="html"><![CDATA[Implement a 3 layer Multi-Layer Perceptron from scratch]]></summary></entry></feed>